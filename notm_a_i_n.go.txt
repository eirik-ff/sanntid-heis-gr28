package mainold

import (
	"fmt"
	"os"

	"./elevio"
)

type Order struct {
	CurrentFloor int
	TargetFloor  int
}

func mainold() {

	numFloors := 4

	elevio.Init("localhost:15657", numFloors)

	var d elevio.MotorDirection = elevio.MD_Up
	var currentFloor int = 0
	var targetFloor int = 0

	drvButtons := make(chan elevio.ButtonEvent)
	drvFloors := make(chan int)
	drvObstr := make(chan bool)
	drvStop := make(chan bool)

	action := make(chan bool)

	go elevio.PollButtons(drvButtons)
	go elevio.PollFloorSensor(drvFloors)
	go elevio.PollObstructionSwitch(drvObstr)
	go elevio.PollStopButton(drvStop)

	go func(action <-chan bool) {
		for {
			select {
			case <-action:
				fmt.Printf("current: %d		target: %d\n", currentFloor, targetFloor)
				if currentFloor == targetFloor {
					d = elevio.MD_Stop
					for b := elevio.ButtonType(0); b <= 2; b++ {
						elevio.SetButtonLamp(b, currentFloor, false)
					}
				} else if currentFloor < targetFloor {
					d = elevio.MD_Up
				} else {
					d = elevio.MD_Down
				}

				elevio.SetMotorDirection(d)
				elevio.SetFloorIndicator(currentFloor)
			}
		}
	}(action)

	for {
		select {
		case btnEvent := <-drvButtons:
			fmt.Printf("Button: %+v\n", btnEvent)
			targetFloor = btnEvent.Floor
			action <- true
			fmt.Println("Button sent to action")
			elevio.SetButtonLamp(btnEvent.Button, btnEvent.Floor, true)

		case current := <-drvFloors:
			fmt.Printf("Floor: %+v\n", current)
			currentFloor = current
			action <- true
			fmt.Println("Floor sent to action")

		case active := <-drvObstr:
			fmt.Printf("Obstruction: %+v\n", active)
			if active {
				elevio.SetMotorDirection(d)
			} else {
				elevio.SetMotorDirection(elevio.MD_Stop)
			}

		case btnStop := <-drvStop:
			fmt.Printf("STOP: %+v\n", btnStop)
			for f := 0; f < numFloors; f++ {
				for b := elevio.ButtonType(0); b < 3; b++ {
					elevio.SetButtonLamp(b, f, false)
				}
			}
			elevio.SetMotorDirection(elevio.MD_Stop)
			os.Exit(1)
		}
	}
}
